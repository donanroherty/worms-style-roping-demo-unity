SHADER SOURCE GUIDE
================
All variations of Marmoset shaders are built in ShaderLab using a core set of Marmoset include files, written in Cg, and included with full source for reference and customization. They can be found in the Marmoset/Shader/ folder as:
MarmosetCore - Shader math and RGBM code

MarmosetInput.cginc - Material parameters and input structures for ShaderLab shaders

MarmosetDirect.cginc - Direct lighting function for ShaderLab. Omni, direct, and spot-light results are computed here.

MarmosetSurf.cginc - Surface Lighting function for ShaderLab. Image-based lighting and texture lookups are performed here.

MarmosetMobile.cginc - Additional #defines, rules, and restrictions shared by all mobile shaders.

MarmosetVertex.cginc - Shared vertex and fragment functions for Marmoset/Vertex Lit shaders.

The .shader files (Bumped Diffuse IBL.shader, etc) themselves don't contain any real math. They simply include these .cginc files and use #defines to configure them for the a desired feature set.


#DEFINE FEATURES
---
All major features of the Marmoset shaders can be enabled or disabled using preprocessor variables. This way all code can be in one surface function with no duplication, and entire blocks of instructions can be turned on or off at the beginning of each shader file. This is why shader files such as "Marmoset Bumped Specular IBL.shader" contain nothing but a series of #define instructions followed by #includes to the core shader headers; the #defines configure the core shader system for the compiler.


#define MARMO_HQ
High-quality mode adds extra vector normalization and more rigorous lighting math to a few places in the shader. Disabled on mobile.

#define MARMO_SKY_ROTATION
Rotates reflection and normal vectors by a sky transform matrix passed in by sky objects. This is performed in the fragment shader and is costly. Disabled on mobile.

#define MARMO_DIFFUSE_IBL
Enables a lookup into the diffuse image-based lighting cubemap.

#define MARMO_SPECULAR_IBL
Enables a lookup into the specular image-based lighting cubemap.

#define MARMO_DIFFUSE_DIRECT
Enables diffuse contributions from direct light sources such as point and directional lights.

#define MARMO_SPECULAR_DIRECT
Enables specular contributions from direct light sources such as point and directional lights.

#define MARMO_NORMALMAP
Adds a normal-mapping texture lookup and math to the fragment shader.

#define MARMO_MIP_GLOSS 
A SPECULAR_IBL feature that uses the specular sharpness material property to look into a specific mip level of the specular image-based lighting cubemap.
Note: Disable on hardware that does not support textureCubeLod texture lookups.

#define MARMO_GLOW
Adds a glow map texture lookup and math for self illuminating surfaces.

#define MARMO_PREMULT_ALPHA
Premultiplies OUT.Albedo.rgb by OUT.Alpha, to be used with a premultipled-alpha blending mode. This option does NOT premultiply the specular output, so the specular component of the surface is blended additively (See Simple Glass shader).

#define MARMO_OCCLUSION
Adds an ambient occlusion map texture lookup that is multiplied with the image-based lighting terms. The texture lookup uses secondary uv coordinates (uv1). The red channel of the map affects diffuse IBL, the green channel affects specular IBL.

#define MARMO_VERTEX_COLOR
Diffuse color is multiplied by the vertex colors. This #define is used by certain vegetation shaders but is otherwise disabled by default.
NOTE: VERTEX_OCCLUSION and VERTEX_COLOR should not be enabled at the same time.

#define MARMO_VERTEX_OCCLUSION
Diffuse and specular ambient occlusion is pulled from the red and green channels of vertex colors and used to mask only the diffuse & specular image-based lighting term.
NOTE: VERTEX_OCCLUSION and VERTEX_COLOR should not be enabled at the same time.

#define MARMO_DIFFUSE_SPECULAR_COMBINED
Diffuse and specular maps are combined as one texture lookup into _MainTex, Unity-style. Diffuse color is in RGB and A is treated as both specular intensity and gloss. This is meant as a mobile optimization.

#define MARMO_SPECULAR_FILTER (Beta, disabled by default)
Filters the light that reaches the diffuse part of the lighting equation by what the specular part has reflected away. Intended to be more physically accurate but can be difficult to control with colored spec maps.

#define MARMO_ALPHA
When defined, output alpha is pulled from the diffuse texture. If not defined, output alpha is always 1.0. This helps conform to some screenspace rendering effects.

#define MARMO_BOX_PROJECTION 1
When set to 1, performs a box-projected cubemap lookup with both the reflection and normal vectors. Can be used with or without sky rotation, turning the skybox from object-oriented bounds to axis-aligned bounds.

#define MARMO_SPHERICAL_HARMONICS 1
When set to 1, uses spherical harmonic coefficients instead of a diffuse cubemap lookup to compute the image-based diffuse lighting.


MULTI_COMPILE
---
There is one other preprocessor directive that must be present in all non-mobile shaders:
#pragma multi_compile MARMO_LINEAR MARMO_GAMMA

This tells the ShaderLab compiler to build two versions of every shader, one with #define MARMO_LINEAR and one with #define MARMO_GAMMA. In code, the Sky.cs script picks between the two depending on the project's color-space configuration. These #defines are used in several places to perform math and RGBM decoding in the proper color-space.


MOBILE
---
Mobile shaders are duplicates of the standard shader set with several optimizations and limitations based on Unity's own mobile shaders. The key differences are:
No sky rotation - This saves an expensive per-fragment matrix multiply
No mipmapped gloss - Part hardware restriction, part Unity bug, only the highest reflection mip level is used on mobile platforms.
Fewer calls to normalize - Corners are cut with vector math in various places.
One shadow-casting light - All other lights are done per vertex for significantly simpler fragment shaders.